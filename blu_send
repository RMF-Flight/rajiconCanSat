#include "BluetoothSerial.h"
#include "m5color.h"



//M5atom matrix(送信側のマイコン)とジョイスティックをつないで本体側のesp32を動かします。
//m5color.hにはmatrixに表示させるLEDの命令が入ってます。


BluetoothSerial SerialBT;

int x_val =0; // 0 - 4095
int y_val =0;

int flag=0;

const int VRX_PIN = 33;
const int VRY_PIN = 25;//なんか23ダメ


TaskHandle_t thp[1];

String MACadd = "9C:9C:1F:E3:7E:CE";
uint8_t address[6]  = {0x9C, 0x9C, 0x1F, 0xE3, 0x7E, 0xCE};
bool connected;

///////////////////////////////////

int matrix[5][5] = {{0,0,0,1,0},
                    {0,1,0,0,1},
                    {1,0,1,0,1},
                    {1,0,0,0,1},
                    {0,1,1,1,0}}; //十字と4色表示



//////////////////////////////////

void Core0a(void *args) {　　　　//サブCPU(Core0)で実行するプログラム、esp32はデュアルコアです。
  //これ以上増やすとウォッチドッグが暴れる。
  while (1) {//ここで無限ループを作っておく
    //サブで実行するプログラムを書く

    if(flag==1){//左廻
       blackout();//画面を消す
       hidari();//左回転用の画面
    }else if(flag==2){//右回り
      blackout();
      migi();
    }else if(flag==3){//前進
      blackout();
      mae();
    }else if(flag==4){ //後退
      blackout();
      ushiro();
    }
    //else if(flag==5){//カメラ
      //he();
    //}
    delay(1);//1/1000秒待つ

 
 }
}









void setup() {
  xTaskCreatePinnedToCore(Core0a, "Core0a", 4096, NULL, 3, &thp[0], 0); //マルチコア
   M5.begin(false, false, true); 

  pinMode(VRX_PIN, INPUT);
  pinMode(VRY_PIN, INPUT);
  
  Serial.begin(115200);
  SerialBT.begin("ESP32test", true); 
  Serial.println("The device started in master mode, make sure remote BT device is on!");
  taiki();//待機用のモーションです。
  // connect(address) is fast (upto 10 secs max), connect(name) is slow (upto 30 secs max) as it needs
  // to resolve name to address first, but it allows to connect to different devices with the same name.
  // Set CoreDebugLevel to Info to view devices bluetooth address and device names
  connected = SerialBT.connect(address);
 
  
  
  if(connected) {
    Serial.println("Connected Succesfully!");
    conne();//接続完了のモーションです。
    conne();
    conne();
    conne();
  } else {
    while(!SerialBT.connected(10000)) {
      Serial.println("Failed to connect. Make sure remote device is available and in range, then restart app."); 
      
    }
  }
  // disconnect() may take upto 10 secs max
  if (SerialBT.disconnect()) {
    Serial.println("Disconnected Succesfully!");
  }
  // this would reconnect to the name(will use address, if resolved) or address used with connect(name/address).
  SerialBT.connect();

  // Sign for the end of bluetooth setup.
  //ここでatomのledを発光させると良いかも
}






void loop(){
   M5.update(); 

   x_val = analogRead(VRX_PIN); // 0 - 4095
   y_val = analogRead(VRY_PIN);


    Serial.printf("X: %d, Y: %d\n", x_val, y_val);

  if (x_val<2000 && y_val<1000) {
    Serial.println("LED is ON.");
    SerialBT.write('L');

    flag=1;

    
  }else if (x_val<2000 && y_val>3800) {
    Serial.println("LED is ON.");
    SerialBT.write('R');

    flag=2;

    
  }else if (x_val>3800 && y_val<2600) {
    Serial.println("LED is ON.");
    SerialBT.write('F');

    flag=3;
    
    
  }else if (x_val<500 && y_val<2600) {
    Serial.println("LED is ON.");
    SerialBT.write('B');

    flag=4;
    
   
  }else if (M5.Btn.wasPressed()){ //matrixの画面が押されたらカメラが動いたら面白いかもです。ここでは何も送ってません。
    Serial.println("LED is ON.");
    SerialBT.write('C');
    he();
    
    delay(500);//0.5秒まつ
    while(1){//無限ループ
      M5.update();
      if(M5.Btn.wasPressed()){
        
        break;   
      }
    }
    flag=5;  
  }
  else{
    Serial.println("LED is OFF.");
    SerialBT.write('N');
    blackout();
    flag=0;
  }

  delay(100);
}
